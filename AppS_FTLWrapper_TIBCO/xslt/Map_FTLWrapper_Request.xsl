<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_FTLWrapper_Request.map" md5sum="084cd233befc89cade14e1256f88bfaa" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Map_FTLWrapper_Request.map
*   Map declaration(s):	Map_FTLWrapper_Request
*   Input file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FTibco_Lib%257DFTLWrapperBO/message%3D%257Bhttp%253A%252F%252FTibco_Lib%252FPutMessageFTLWrapper%257DputMessageRequestMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/correlationContext%3D%257Bhttp%253A%252F%252FTibco_Lib%257DFTLWrapperBO/message%3D%257Bhttp%253A%252F%252FAS_FTLWrapper_TIBCO%252FFTLWrapperInterface%257DputRequestMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:in2="http://Tibco_Lib/PutMessageFTLWrapper"
    xmlns:io5="http://Tibco_Lib"
    xmlns:io4="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:in="wsdl.http://Tibco_Lib/PutMessageFTLWrapper"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out2="wsdl.http://AS_FTLWrapper_TIBCO/FTLWrapperInterface"
    xmlns:out="http://AS_FTLWrapper_TIBCO/FTLWrapperInterface"
    xmlns:out3="http://AS_FTLWrapper_TIBCO"
    xmlns:map="http://AS_FTLWrapper_TIBCO/xslt/Map_FTLWrapper_Request"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set xs date fn exsl map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io2:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_FTLWrapper_Request2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io2:smo" mode="map:Map_FTLWrapper_Request"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:Map_FTLWrapper_Request">
    <io2:smo>
      <context>
        <correlation>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io5:FTLWrapperBO'"/>
          </xsl:attribute>
          <!-- a simple data mapping: "body/in2:putMessage/inputFTL/correlationId"(string) to "correlationId"(string) -->
          <xsl:if test="body/in2:putMessage/inputFTL/correlationId">
            <xsl:element name="correlationId">
              <xsl:value-of select="body/in2:putMessage/inputFTL/correlationId"/>
            </xsl:element>
          </xsl:if>
        </correlation>
      </context>
      <headers>
        <!-- a structural mapping: "headers/SMOHeader"(SMOHeaderType) to "SMOHeader"(SMOHeaderType) -->
        <xsl:if test="headers/SMOHeader">
          <xsl:copy-of select="headers/SMOHeader" copy-namespaces="yes"/>
        </xsl:if>
        <HTTPHeader>
          <!-- a for-each transform: "properties"(PropertyType) to "header"(HTTPHeader) -->
          <xsl:apply-templates select="headers/properties" mode="localPropertiesToHeader_1199508495"/>
        </HTTPHeader>
      </headers>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out2:putRequestMsg'"/>
        </xsl:attribute>
        <out:put>
          <request>
            <!-- a simple data mapping: "body/in2:putMessage/inputFTL/payload"(string) to "payload"(string) -->
            <xsl:if test="body/in2:putMessage/inputFTL/payload">
              <xsl:element name="payload">
                <xsl:value-of select="body/in2:putMessage/inputFTL/payload"/>
              </xsl:element>
            </xsl:if>
          </request>
        </out:put>
      </body>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:Map_FTLWrapper_Request2">
    <xsl:param name="smo"/>
    <context>
      <correlation>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io5:FTLWrapperBO'"/>
        </xsl:attribute>
        <!-- a simple data mapping: "$smo/body/in2:putMessage/inputFTL/correlationId"(string) to "correlationId"(string) -->
        <xsl:if test="$smo/body/in2:putMessage/inputFTL/correlationId">
          <xsl:element name="correlationId">
            <xsl:value-of select="$smo/body/in2:putMessage/inputFTL/correlationId"/>
          </xsl:element>
        </xsl:if>
      </correlation>
    </context>
    <headers>
      <!-- a structural mapping: "$smo/headers/SMOHeader"(SMOHeaderType) to "SMOHeader"(SMOHeaderType) -->
      <xsl:if test="$smo/headers/SMOHeader">
        <xsl:copy-of select="$smo/headers/SMOHeader" copy-namespaces="yes"/>
      </xsl:if>
      <HTTPHeader>
        <!-- a for-each transform: "properties"(PropertyType) to "header"(HTTPHeader) -->
        <xsl:apply-templates select="$smo/headers/properties" mode="localPropertiesToHeader_1199508495"/>
      </HTTPHeader>
    </headers>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:putRequestMsg'"/>
      </xsl:attribute>
      <out:put>
        <request>
          <!-- a simple data mapping: "$smo/body/in2:putMessage/inputFTL/payload"(string) to "payload"(string) -->
          <xsl:if test="$smo/body/in2:putMessage/inputFTL/payload">
            <xsl:element name="payload">
              <xsl:value-of select="$smo/body/in2:putMessage/inputFTL/payload"/>
            </xsl:element>
          </xsl:if>
        </request>
      </out:put>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "properties" to "header".  -->
  <xsl:template match="properties"  mode="localPropertiesToHeader_1199508495">
    <header>
      <!-- a simple data mapping: "name"(string) to "io6:name"(string) -->
      <io6:name>
        <xsl:value-of select="name"/>
      </io6:name>
      <!-- a simple data mapping: "value"(anySimpleType) to "io6:value"(string) -->
      <io6:value>
        <xsl:value-of select="value"/>
      </io6:value>
    </header>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
